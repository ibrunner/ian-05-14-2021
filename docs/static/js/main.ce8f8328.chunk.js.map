{"version":3,"sources":["util/useOrderData.tsx","util/common.ts","util/getGroupedOrders.ts","util/groupedOrderReducer.tsx","components/GroupConfig.tsx","components/OrderList.tsx","components/App.tsx","index.tsx"],"names":["getUpdatedOrderList","orderList","newOrders","updatedOrders","length","forEach","order","price","size","orderIndex","findIndex","newOrder","splice","sortedIndex","low","high","mid","getSortedIndex","useOrderData","React","useState","asks","bids","orderSet","setOrderSet","error","setError","ws","useRef","useEffect","params","event","feed","product_ids","current","WebSocket","onopen","send","JSON","stringify","onclose","console","log","close","onmessage","e","message","parse","data","onerror","groupSizes","getGroupedOrders","orders","groupSize","groupedOrders","currentGroupVal","currentGroupIndex","index","push","total","currentGroupOrder","newSize","newTotal","Math","ceil","groupedOrderReducer","state","action","type","currentIndexAtDecrease","groupSizeDecreased","decreasedGroupSize","currentIndexAtIncrease","groupSizeIncreased","increasedGroupSize","GroupConfig","onIncrease","onDecrease","className","onClick","disabled","toFixed","toLocaleString","OrderList","orderType","OrdersTableHeader","title","OrdersTable","colSpan","highValue","reverse","map","rest","OrderRow","key","relativeValue","rgb","style","backgroundColor","App","useReducer","dispatch","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ce8f8328.chunk.js","sourcesContent":["import React from \"react\";\nimport { Order, OrderSet } from \"../types\";\n\ntype OrderMessage = {\n  asks: number[][];\n  bids: number[][];\n  feed: string;\n  product_id: string;\n};\n\n/**\n * gets the index of an item in sorted order\n * @param {Order[]} orderList - the lists of orders\n * @param {Order} order - the individual order to test\n */\nfunction getSortedIndex(orderList: Order[], order: Order): number {\n  var low = 0,\n    high = orderList.length;\n\n  while (low < high) {\n    var mid = (low + high) >>> 1;\n    if (orderList[mid].price < order.price) low = mid + 1;\n    else high = mid;\n  }\n  return low;\n}\n\n/**\n * processes new orders by sorting and merging them into the orders list\n * @param {Order[]} orderList - the lists of orders\n * @param {Order} newOrders - the new list to merge\n */\nexport function getUpdatedOrderList(\n  orderList: Order[],\n  newOrders: number[][]\n): Order[] {\n  let updatedOrders: Order[] = [...orderList];\n\n  if (newOrders.length) {\n    newOrders.forEach((order) => {\n      const [price, size] = order;\n\n      const orderIndex = updatedOrders.findIndex(\n        (order) => order.price === price\n      );\n\n      const newOrder = {\n        price,\n        size,\n      };\n\n      if (orderIndex >= 0) {\n        // order price exists\n        if (!size) {\n          // delete orders with size 0\n          updatedOrders.splice(orderIndex, 1);\n        } else {\n          // replace existing\n          updatedOrders.splice(orderIndex, 1, newOrder);\n        }\n      } else if (size) {\n        // insert sorted order\n        const newOrder = {\n          price,\n          size,\n        };\n\n        const sortedIndex = getSortedIndex(updatedOrders, newOrder);\n        updatedOrders.splice(sortedIndex, 0, newOrder);\n      }\n    });\n  }\n  return updatedOrders;\n}\n\nfunction useOrderData() {\n  const [orderSet, setOrderSet] = React.useState<OrderSet>({\n    asks: [],\n    bids: [],\n  });\n  const [error, setError] = React.useState<Event | null>(null);\n  const ws: React.MutableRefObject<WebSocket | null> = React.useRef(null);\n\n  React.useEffect(() => {\n    const params = {\n      event: \"subscribe\",\n      feed: \"book_ui_1\",\n      product_ids: [\"PI_XBTUSD\"],\n    };\n    ws.current = new WebSocket(\"wss://www.cryptofacilities.com/ws/v1\");\n    ws.current.onopen = () => {\n      ws.current?.send(JSON.stringify(params));\n    };\n    ws.current.onclose = () => console.log(\"ws closed\");\n\n    return () => {\n      ws.current?.close();\n    };\n  }, []);\n\n  React.useEffect(() => {\n    if (!ws.current) return;\n\n    ws.current.onmessage = (e) => {\n      const message: OrderMessage = JSON.parse(e.data);\n\n      setOrderSet(({ asks, bids }) => ({\n        asks: message.asks ? getUpdatedOrderList(asks, message.asks) : asks,\n        bids: message.bids ? getUpdatedOrderList(bids, message.bids) : bids,\n      }));\n    };\n\n    ws.current.onerror = (e) => {\n      setError(e);\n      console.error(\"WebSocket error observed:\", e);\n    };\n  }, []);\n\n  return {\n    orderSet,\n    error,\n  };\n}\n\nexport default useOrderData;\n","import { GroupSize } from \"../types\";\n\nexport const groupSizes: GroupSize[] = [\n  0.5, 1, 2.5, 5, 10, 25, 50, 100, 250, 500, 1000, 2500,\n];\n","import { GroupedOrder, Order, GroupSize } from \"../types\";\n\n/**\n * Adds groupings and totals to order lists\n * @param {Order[]} orders - the lists of orders\n * @param {GroupSize} groupSize - the size of the grouping\n */\nfunction getGroupedOrders(\n  orders: Order[],\n  groupSize: GroupSize\n): GroupedOrder[] {\n  // set initial groupVal\n  let groupedOrders: GroupedOrder[] = [];\n  let currentGroupVal: number = groupSize;\n  let currentGroupIndex = 0;\n  // for every order\n  for (let index = 0; index < orders.length; index++) {\n    const order = orders[index];\n    const { price, size } = order;\n    // if less than group val\n    if (price <= currentGroupVal) {\n      // list empty, add first element\n      if (!groupedOrders.length) {\n        groupedOrders.push({ price: currentGroupVal, size, total: size });\n      } else {\n        // list not empty\n        // if first item in group\n        if (groupedOrders[currentGroupIndex].price < currentGroupVal) {\n          groupedOrders.push({\n            price: currentGroupVal,\n            size,\n            total: size + groupedOrders[currentGroupIndex].total,\n          });\n          currentGroupIndex++;\n        } else {\n          // recalculate last groupedOrders item\n          const currentGroupOrder: GroupedOrder =\n            groupedOrders[currentGroupIndex];\n          const newSize = currentGroupOrder.size + size;\n          const newTotal = currentGroupOrder.total + size;\n          groupedOrders.splice(currentGroupIndex, 1,{\n            ...currentGroupOrder,\n            size: newSize,\n            total: newTotal,\n          });\n        }\n      }\n    } else {\n      // use ceil to get new groupVal\n      currentGroupVal = Math.ceil(price / groupSize) * groupSize;\n\n      if (!groupedOrders.length) {\n        groupedOrders.push({ price: currentGroupVal, size, total: size });\n      } else {\n        const newTotal = size + groupedOrders[currentGroupIndex].total;\n\n        // add to last groupedOrders item\n        groupedOrders.push({\n          price: currentGroupVal,\n          size,\n          total: newTotal,\n        });\n        currentGroupIndex++;\n      }\n    }\n  }\n\n  return groupedOrders;\n}\n\nexport default getGroupedOrders;\n","import { GroupedOrder, GroupSize, OrderSet } from \"../types\";\nimport { groupSizes } from \"./common\";\nimport getGroupedOrders from \"./getGroupedOrders\";\n\nexport interface State {\n  asks: GroupedOrder[];\n  bids: GroupedOrder[];\n  groupSize: GroupSize;\n}\n\n// Reducer Actions\ntype GroupSizeDecreased = {\n  type: \"GROUP_SIZE_DECREASED\";\n  orderSet: OrderSet;\n};\n\ntype GroupSizeIncreased = {\n  type: \"GROUP_SIZE_INCREASED\";\n  orderSet: OrderSet;\n};\n\ntype OrderSetUpdated = {\n  type: \"ORDER_SET_UPDATED\";\n  orderSet: OrderSet;\n};\n\nexport type Action = GroupSizeDecreased | GroupSizeIncreased | OrderSetUpdated;\n\nconst groupedOrderReducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"GROUP_SIZE_DECREASED\":\n      const currentIndexAtDecrease = groupSizes.findIndex(\n        (size) => size === state.groupSize\n      );\n      const groupSizeDecreased = currentIndexAtDecrease > 0;\n      const decreasedGroupSize = groupSizeDecreased\n        ? groupSizes[currentIndexAtDecrease - 1]\n        : state.groupSize;\n\n      return {\n        ...state,\n        asks: groupSizeDecreased\n          ? getGroupedOrders(action.orderSet.asks, decreasedGroupSize)\n          : state.asks,\n        bids: groupSizeDecreased\n          ? getGroupedOrders(action.orderSet.bids, decreasedGroupSize)\n          : state.bids,\n        groupSize: decreasedGroupSize,\n      };\n    case \"GROUP_SIZE_INCREASED\":\n      const currentIndexAtIncrease = groupSizes.findIndex(\n        (size) => size === state.groupSize\n      );\n      const groupSizeIncreased =\n        currentIndexAtIncrease < groupSizes[groupSizes.length - 1];\n      const increasedGroupSize = groupSizeIncreased\n        ? groupSizes[currentIndexAtIncrease + 1]\n        : state.groupSize;\n\n      return {\n        ...state,\n        asks: groupSizeIncreased\n          ? getGroupedOrders(action.orderSet.asks, increasedGroupSize)\n          : state.asks,\n        bids: groupSizeIncreased\n          ? getGroupedOrders(action.orderSet.bids, increasedGroupSize)\n          : state.bids,\n        groupSize: increasedGroupSize,\n      };\n\n    case \"ORDER_SET_UPDATED\":\n      return {\n        ...state,\n        asks: getGroupedOrders(action.orderSet.asks, state.groupSize),\n        bids: getGroupedOrders(action.orderSet.bids, state.groupSize),\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default groupedOrderReducer;\n","import { groupSizes } from \"../util/common\";\n\ninterface GroupConfigProps {\n  onIncrease: () => unknown;\n  onDecrease: () => unknown;\n  groupSize: Number;\n}\n\nfunction GroupConfig({ onIncrease, onDecrease, groupSize }: GroupConfigProps) {\n  return (\n    <div className=\"group-config\">\n      <button onClick={onDecrease} disabled={groupSize === groupSizes[0]}>\n        -\n      </button>\n      <div className=\"group-config-label\">\n        Group:{\" \"}\n        <span className=\"group-config-size\">\n          {groupSize.toFixed(2).toLocaleString()}\n        </span>\n      </div>\n      <button\n        onClick={onIncrease}\n        disabled={groupSize === groupSizes[groupSizes.length - 1]}\n      >\n        +\n      </button>\n    </div>\n  );\n}\n\nexport default GroupConfig;\n","import { GroupedOrder } from \"../types\";\n\ninterface OrderListProps {\n  orderType: \"bids\" | \"asks\";\n  orders: GroupedOrder[];\n}\n\nfunction OrderList({ orderType, orders }: OrderListProps) {\n  return (\n    <>\n      <OrdersTableHeader\n        title={orderType === \"bids\" ? \"Bids\" : \"Asks\"}\n        orderType={orderType}\n      />\n      <OrdersTable orders={orders} orderType={orderType} />\n    </>\n  );\n}\n\ninterface OrdersTableHeaderProps {\n  title: string;\n  orderType: \"bids\" | \"asks\";\n}\n\nexport default OrderList;\n\nfunction OrdersTableHeader({ title, orderType }: OrdersTableHeaderProps) {\n  return (\n    <table className={`orders-header ${orderType}`}>\n      <thead>\n        <tr>\n          <th colSpan={3}>\n            <div className=\"orders-header-title\">{title}</div>\n          </th>\n        </tr>\n        <tr>\n          <th className=\"price\">Price</th>\n          <th className=\"size\">Size</th>\n          <th className=\"total\">Total</th>\n        </tr>\n      </thead>\n    </table>\n  );\n}\n\ninterface OrdersTableProps {\n  orderType: \"bids\" | \"asks\";\n  orders: GroupedOrder[];\n}\n\nfunction OrdersTable({ orderType, orders }: OrdersTableProps) {\n  const highValue: number | null = orders.length\n    ? orders[orders.length - 1].total\n    : null;\n\n  return (\n    <div className={`orders-table-container ${orderType}`}>\n      <table>\n        <tbody>\n          {[...orders].reverse().map(({ price, ...rest }) => {\n            return (\n              <OrderRow\n                {...rest}\n                price={price}\n                key={price}\n                highValue={highValue}\n                orderType={orderType}\n              />\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\ninterface OrderRowProps extends GroupedOrder {\n  highValue: number | null;\n  orderType: \"bids\" | \"asks\";\n}\n\nfunction OrderRow({ price, size, total, highValue, orderType }: OrderRowProps) {\n  const relativeValue = highValue && highValue !== 0 ? (total / highValue) * 0.5 : 0;\n  const rgb = orderType === \"bids\" ? \"158, 235, 207\" : \"255, 114, 92\";\n  return (\n    <tr>\n      <td\n        className=\"price\"\n        style={{ backgroundColor: `rgba(${rgb}, ${relativeValue})` }}\n      >\n        {price.toFixed(2).toLocaleString()}\n      </td>\n      <td>{size.toLocaleString()}</td>\n      <td>{total.toLocaleString()}</td>\n    </tr>\n  );\n}\n","import React from \"react\";\nimport \"../styles/App.css\";\nimport useOrderData from \"../util/useOrderData\";\nimport groupedOrderReducer from \"../util/groupedOrderReducer\";\nimport GroupConfig from \"./GroupConfig\";\nimport OrderList from \"./OrderList\";\n\nfunction App() {\n  const [state, dispatch] = React.useReducer(groupedOrderReducer, {\n    asks: [],\n    bids: [],\n    groupSize: 1,\n  });\n  const { orderSet, error } = useOrderData();\n\n  const { groupSize, asks, bids } = state;\n\n  React.useEffect(() => {\n    dispatch({ type: \"ORDER_SET_UPDATED\", orderSet });\n  }, [orderSet]);\n  if (error) {\n    return (\n      <div className=\"error-container\">\n        <div className=\"error\">Error Connecting to API</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"layout-container center washed-yellow flex\">\n        <GroupConfig\n          groupSize={groupSize}\n          onIncrease={() =>\n            dispatch({ type: \"GROUP_SIZE_INCREASED\", orderSet })\n          }\n          onDecrease={() =>\n            dispatch({ type: \"GROUP_SIZE_DECREASED\", orderSet })\n          }\n        />\n        <div className=\"orders-container\">\n          <OrderList orderType=\"bids\" orders={bids} />\n          <OrderList orderType=\"asks\" orders={asks} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./components/App\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}